/* soapStub.h
   Generated by gSOAP 2.8.28 from ../wsdl/calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns2	"urn:calc"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20828
# error "GSOAP VERSION 20828 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs, and Unions                                               *
 *                                                                            *
\******************************************************************************/

struct ns2__addResponse;	/* ../wsdl/calc.h:314 */
struct ns2__add;	/* ../wsdl/calc.h:314 */
struct ns2__subResponse;	/* ../wsdl/calc.h:382 */
struct ns2__sub;	/* ../wsdl/calc.h:382 */
struct ns2__mulResponse;	/* ../wsdl/calc.h:450 */
struct ns2__mul;	/* ../wsdl/calc.h:450 */
struct ns2__divResponse;	/* ../wsdl/calc.h:518 */
struct ns2__div;	/* ../wsdl/calc.h:518 */
struct ns2__powResponse;	/* ../wsdl/calc.h:586 */
struct ns2__pow;	/* ../wsdl/calc.h:586 */

/* ../wsdl/calc.h:314 */
#ifndef SOAP_TYPE_ns2__addResponse
#define SOAP_TYPE_ns2__addResponse (14)
/* ns2:addResponse complex type: */
struct ns2__addResponse
{
public:
	double result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_ns2__addResponse */
	         ns2__addResponse();
	friend SOAP_FMAC1 ns2__addResponse * SOAP_FMAC2 soap_instantiate_ns2__addResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:314 */
#ifndef SOAP_TYPE_ns2__add
#define SOAP_TYPE_ns2__add (15)
/* ns2:add complex type: */
struct ns2__add
{
public:
	double a;	/* required element of XSD type xsd:double */
	double b;	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_ns2__add */
	         ns2__add();
	friend SOAP_FMAC1 ns2__add * SOAP_FMAC2 soap_instantiate_ns2__add(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:382 */
#ifndef SOAP_TYPE_ns2__subResponse
#define SOAP_TYPE_ns2__subResponse (17)
/* ns2:subResponse complex type: */
struct ns2__subResponse
{
public:
	double result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_ns2__subResponse */
	         ns2__subResponse();
	friend SOAP_FMAC1 ns2__subResponse * SOAP_FMAC2 soap_instantiate_ns2__subResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:382 */
#ifndef SOAP_TYPE_ns2__sub
#define SOAP_TYPE_ns2__sub (18)
/* ns2:sub complex type: */
struct ns2__sub
{
public:
	double a;	/* required element of XSD type xsd:double */
	double b;	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_ns2__sub */
	         ns2__sub();
	friend SOAP_FMAC1 ns2__sub * SOAP_FMAC2 soap_instantiate_ns2__sub(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:450 */
#ifndef SOAP_TYPE_ns2__mulResponse
#define SOAP_TYPE_ns2__mulResponse (20)
/* ns2:mulResponse complex type: */
struct ns2__mulResponse
{
public:
	double result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 20; } /* = unique type id SOAP_TYPE_ns2__mulResponse */
	         ns2__mulResponse();
	friend SOAP_FMAC1 ns2__mulResponse * SOAP_FMAC2 soap_instantiate_ns2__mulResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:450 */
#ifndef SOAP_TYPE_ns2__mul
#define SOAP_TYPE_ns2__mul (21)
/* ns2:mul complex type: */
struct ns2__mul
{
public:
	double a;	/* required element of XSD type xsd:double */
	double b;	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_ns2__mul */
	         ns2__mul();
	friend SOAP_FMAC1 ns2__mul * SOAP_FMAC2 soap_instantiate_ns2__mul(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:518 */
#ifndef SOAP_TYPE_ns2__divResponse
#define SOAP_TYPE_ns2__divResponse (23)
/* ns2:divResponse complex type: */
struct ns2__divResponse
{
public:
	double result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_ns2__divResponse */
	         ns2__divResponse();
	friend SOAP_FMAC1 ns2__divResponse * SOAP_FMAC2 soap_instantiate_ns2__divResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:518 */
#ifndef SOAP_TYPE_ns2__div
#define SOAP_TYPE_ns2__div (24)
/* ns2:div complex type: */
struct ns2__div
{
public:
	double a;	/* required element of XSD type xsd:double */
	double b;	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_ns2__div */
	         ns2__div();
	friend SOAP_FMAC1 ns2__div * SOAP_FMAC2 soap_instantiate_ns2__div(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:586 */
#ifndef SOAP_TYPE_ns2__powResponse
#define SOAP_TYPE_ns2__powResponse (26)
/* ns2:powResponse complex type: */
struct ns2__powResponse
{
public:
	double result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_ns2__powResponse */
	         ns2__powResponse();
	friend SOAP_FMAC1 ns2__powResponse * SOAP_FMAC2 soap_instantiate_ns2__powResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:586 */
#ifndef SOAP_TYPE_ns2__pow
#define SOAP_TYPE_ns2__pow (27)
/* ns2:pow complex type: */
struct ns2__pow
{
public:
	double a;	/* required element of XSD type xsd:double */
	double b;	/* required element of XSD type xsd:double */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_ns2__pow */
	         ns2__pow();
	friend SOAP_FMAC1 ns2__pow * SOAP_FMAC2 soap_instantiate_ns2__pow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ../wsdl/calc.h:647 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (28)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
	         SOAP_ENV__Header();
	friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ../wsdl/calc.h:647 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (29)
/* Type SOAP_ENV__Code is a recursive data type (in)directly referencing itself through its (base) class members */
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of XSD type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of XSD type SOAP-ENV:Code */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
	         SOAP_ENV__Code();
	friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ../wsdl/calc.h:647 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (31)
/* SOAP-ENV:Detail complex type: */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below)
	   WARNING: do not create a cyclic data structure graph throught this element unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
	void *fault;	/* transient (not serialized) */
public:
	int soap_type() const { return 31; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
	         SOAP_ENV__Detail();
	friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ../wsdl/calc.h:647 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (34)
/* SOAP-ENV:Reason complex type: */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of XSD type xsd:string */
public:
	int soap_type() const { return 34; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
	         SOAP_ENV__Reason();
	friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ../wsdl/calc.h:647 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (35)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of XSD type xsd:QName */
	char *faultstring;	/* optional element of XSD type xsd:string */
	char *faultactor;	/* optional element of XSD type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of XSD type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of XSD type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of XSD type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of XSD type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of XSD type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of XSD type SOAP-ENV:Detail */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
	         SOAP_ENV__Fault();
	friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* ../wsdl/calc.h:101 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* ../wsdl/calc.h:101 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns2__add(struct soap*, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 ns2__sub(struct soap*, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 ns2__mul(struct soap*, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 ns2__div(struct soap*, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 ns2__pow(struct soap*, double a, double b, double &result);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__add(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__sub(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__mul(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__div(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__pow(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__add(struct soap *soap, const char *soap_endpoint, const char *soap_action, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__sub(struct soap *soap, const char *soap_endpoint, const char *soap_action, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__mul(struct soap *soap, const char *soap_endpoint, const char *soap_action, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__div(struct soap *soap, const char *soap_endpoint, const char *soap_action, double a, double b, double &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__pow(struct soap *soap, const char *soap_endpoint, const char *soap_action, double a, double b, double &result);

#endif

/* End of soapStub.h */
